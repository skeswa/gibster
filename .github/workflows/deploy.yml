name: Deploy Gibster

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'
        cache-dependency-path: 'backend/requirements.txt'

    - name: Create virtual environment
      run: |
        python -m venv venv
        echo "VIRTUAL_ENV=${{ github.workspace }}/venv" >> $GITHUB_ENV
        echo "${{ github.workspace }}/venv/bin" >> $GITHUB_PATH

    - name: Install backend dependencies
      run: |
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r backend/requirements.txt

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Run all tests with coverage (excludes e2e)
      run: |
        source venv/bin/activate
        python scripts/run_tests.py --coverage
      env:
        CI: true
        NODE_ENV: test

    - name: Upload backend coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-coverage-report
        path: htmlcov/

    - name: Upload frontend coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-coverage-report
        path: frontend/coverage/

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config

    - name: Update image tags in manifests
      run: |
        cd k8s/overlays/production
        
        # Create kustomization.yaml with image tags
        cat > kustomization.yaml << EOF
        apiVersion: kustomize.config.k8s.io/v1beta1
        kind: Kustomization

        resources:
        - ../../base
        - ingress.yaml
        - certificate.yaml

        images:
        - name: gibster-backend
          newName: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          newTag: ${{ github.sha }}
        - name: gibster-frontend
          newName: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          newTag: ${{ github.sha }}

        patches:
        - target:
            kind: ConfigMap
            name: gibster-config
          patch: |-
            - op: add
              path: /data/environment
              value: production
            - op: replace
              path: /data/api-url
              value: https://${{ secrets.PRODUCTION_DOMAIN }}
        - path: deployment-patches.yaml
        EOF
        
        # Generate ingress from template
        sed "s/\${PRODUCTION_DOMAIN}/${{ secrets.PRODUCTION_DOMAIN }}/g" ingress-template.yaml > ingress.yaml
        
        # Generate certificate from template
        sed "s/\${PRODUCTION_DOMAIN}/${{ secrets.PRODUCTION_DOMAIN }}/g" certificate-template.yaml > certificate.yaml

    - name: Create namespace if it doesn't exist
      run: |
        kubectl create namespace gibster --dry-run=client -o yaml | kubectl apply -f -
    
    - name: Create or update Kubernetes secrets
      run: |
        # Delete existing secret if it exists
        kubectl delete secret gibster-secrets -n gibster --ignore-not-found=true
        
        # Create new secret from GitHub secrets
        kubectl create secret generic gibster-secrets \
          --namespace=gibster \
          --from-literal=database-url="${{ secrets.DATABASE_URL }}" \
          --from-literal=secret-key="${{ secrets.SECRET_KEY }}" \
          --from-literal=encryption-key="${{ secrets.ENCRYPTION_KEY }}" \
          --from-literal=redis-host="${{ secrets.REDIS_HOST }}" \
          --from-literal=redis-port="${{ secrets.REDIS_PORT }}" \
          --from-literal=redis-password="${{ secrets.REDIS_PASSWORD }}"

    - name: Deploy to Kubernetes
      run: |
        kubectl apply -k k8s/overlays/production
        kubectl rollout status deployment/gibster-backend -n gibster
        kubectl rollout status deployment/gibster-frontend -n gibster
        kubectl rollout status deployment/gibster-celery -n gibster