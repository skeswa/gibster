name: Deploy to Rhuidean Cluster

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black isort

    - name: Run backend tests
      run: |
        pytest backend/tests -v --cov=backend/app
        black --check backend/
        isort --check-only backend/

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Run frontend tests
      working-directory: frontend
      run: |
        npm run test -- --passWithNoTests
        npm run lint
        npm run type-check

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config

    - name: Update image tags in manifests
      run: |
        cd k8s/overlays/production
        cat > kustomization.yaml << EOF
        apiVersion: kustomize.config.k8s.io/v1beta1
        kind: Kustomization

        resources:
        - ../../base

        images:
        - name: gibster-backend
          newName: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          newTag: ${{ github.sha }}
        - name: gibster-frontend
          newName: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          newTag: ${{ github.sha }}

        configMapGenerator:
        - name: gibster-config
          behavior: merge
          literals:
          - environment=production
          - api-url=https://gibster.sandile.dev

        secretGenerator:
        - name: gibster-secrets
          behavior: merge
          envs:
          - secrets.env
        EOF

    - name: Create secrets file
      run: |
        cd k8s/overlays/production
        cat > secrets.env << EOF
        database-url=${{ secrets.DATABASE_URL }}
        secret-key=${{ secrets.SECRET_KEY }}
        encryption-key=${{ secrets.ENCRYPTION_KEY }}
        redis-password=${{ secrets.REDIS_PASSWORD }}
        s3-access-key=${{ secrets.S3_ACCESS_KEY }}
        s3-secret-key=${{ secrets.S3_SECRET_KEY }}
        EOF

    - name: Deploy to Kubernetes
      run: |
        kubectl apply -k k8s/overlays/production
        kubectl rollout status deployment/gibster-backend -n gibster
        kubectl rollout status deployment/gibster-frontend -n gibster
        kubectl rollout status deployment/gibster-celery -n gibster